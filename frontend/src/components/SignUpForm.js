import { useState, useContext } from "react";

import { Link as RouterLink, useNavigate } from "react-router-dom";

import Avatar from "@mui/material/Avatar";
import Button from "@mui/material/Button";
import CssBaseline from "@mui/material/CssBaseline";
import TextField from "@mui/material/TextField";
import CircularProgress from "@mui/material/CircularProgress";
import Alert from "@mui/material/Alert";
import AlertTitle from "@mui/material/AlertTitle";
import Grid from "@mui/material/Grid";
import Box from "@mui/material/Box";
import RedeemIcon from "@mui/icons-material/Redeem";
import Typography from "@mui/material/Typography";
import Container from "@mui/material/Container";

import AuthContext from "../contexts/auth-context";

import Copyright from "./Copyright";

import classes from "./SignUpForm.module.css";

const emailRegex =
  /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|.(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

const SignUpForm = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  const [emailIsValid, setEmailIsValid] = useState(true);
  const [nameIsValid, setNameIsValid] = useState(true);
  const [passwordIsValid, setPasswordIsValid] = useState(true);

  const [isLoading, setIsLoading] = useState(false);

  //error generated by backend
  const [isError, setIsError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  const authCtx = useContext(AuthContext);

  const navigate = useNavigate();

  const formIsValid = emailIsValid && passwordIsValid && nameIsValid;

  const nameChangeHandler = (event) => {
    setName(event.target.value);

    if (event.target.value.length > 0) setNameIsValid(true);
  };
  const emailChangeHandler = (event) => {
    setEmail(event.target.value);

    if (emailRegex.test(event.target.value)) setEmailIsValid(true);
  };
  const passwordChangeHandler = (event) => {
    setPassword(event.target.value);

    if (event.target.value.length >= 6) setPasswordIsValid(true);
  };

  const nameBlurHandler = () => {
    setNameIsValid(name.length > 0);
  };
  const emailBlurHandler = () => {
    setEmailIsValid(emailRegex.test(email));
  };
  const passwordBlurHandler = () => {
    setPasswordIsValid(password.length >= 6);
  };

  const submitHandler = async (event) => {
    event.preventDefault();

    setIsLoading(true);

    if (formIsValid) {
      try {
        const response = await fetch(
          "http://localhost:5000/api/v1/auth/register",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              name: name,
              email: email,
              password: password,
            }),
          }
        );
        const data = await response.json();

        if (!response.ok) {
          setIsError(true);
          setErrorMessage(data.error);
          throw new Error(data.error);
        }
        authCtx.onLogin(data.token);
        navigate("/profile");
      } catch (err) {}
    }

    setIsLoading(false);
  };

  return (
    <div className={classes.signUp__container}>
      <Container component="main" maxWidth="xs" className={classes.signUpForm}>
        <CssBaseline />
        <div className={classes.paper}>
          <Avatar
            sx={{
              margin: "1rem",
              backgroundColor: "secondary.main",
            }}
          >
            <RedeemIcon />
          </Avatar>
          <Typography component="h1" variant="h5">
            Sign Up
          </Typography>
          <form className={classes.form} onSubmit={submitHandler}>
            <TextField
              error={!nameIsValid}
              helperText={nameIsValid ? "" : "Name field cannot be empty"}
              onChange={nameChangeHandler}
              onBlur={nameBlurHandler}
              variant="outlined"
              margin="normal"
              required
              fullWidth
              id="name"
              label="Name"
              name="name"
              autoComplete="name"
              autoFocus
            />
            <TextField
              error={!emailIsValid}
              helperText={
                emailIsValid ? "" : "Please enter a valid email address"
              }
              onChange={emailChangeHandler}
              onBlur={emailBlurHandler}
              variant="outlined"
              margin="normal"
              required
              fullWidth
              id="email"
              label="Email Address"
              name="email"
              autoComplete="email"
            />
            <TextField
              error={!passwordIsValid}
              helperText={
                passwordIsValid ? "" : "password must be at least 6 characters"
              }
              onChange={passwordChangeHandler}
              onBlur={passwordBlurHandler}
              variant="outlined"
              margin="normal"
              required
              fullWidth
              name="password"
              label="Password"
              type="password"
              id="password"
              autoComplete="current-password"
            />
            <Button
              type="submit"
              fullWidth
              variant="contained"
              color="primary"
              disabled={formIsValid ? false : true}
              className={classes.submit}
            >
              Sign Up
            </Button>
            {/* error */}
            {isError && (
              <Grid
                container
                direction="column"
                justify="center"
                alignItems="center"
                style={{ marginBottom: ".5rem" }}
              >
                <Alert
                  severity="error"
                  variant="outlined"
                  style={{ backgroundColor: "#ff000012" }}
                >
                  <AlertTitle>Error</AlertTitle>
                  {errorMessage}
                </Alert>
              </Grid>
            )}
            {/* loading */}
            {isLoading && (
              <Grid
                container
                direction="column"
                justify="center"
                alignItems="center"
              >
                <CircularProgress></CircularProgress>
              </Grid>
            )}
            <Grid container justifyContent="center">
              <Grid item>
                <Button
                  variant="text"
                  color="primary"
                  component={RouterLink}
                  to="/login"
                  sx={{ mt: "1rem" }}
                >
                  Already have an account? Sign In
                </Button>
              </Grid>
            </Grid>
          </form>
        </div>
        <Box mt={8}>
          <Copyright />
        </Box>
      </Container>
    </div>
  );
};

export default SignUpForm;
